{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///D:/AI/Course_Complete/Fullstack%20Developer%20with%20Cursor%20Vide%20coding/projecttry/myapp/my-app/lib/api-keys-store.ts"],"sourcesContent":["// Shared in-memory storage for API keys\r\n// In production, you would use a database like PostgreSQL, MongoDB, etc.\r\n\r\nexport interface ApiKey {\r\n  id: string;\r\n  name: string;\r\n  key: string;\r\n  description: string;\r\n  createdAt: string;\r\n  lastUsed?: string;\r\n  isActive: boolean;\r\n}\r\n\r\n// In-memory storage\r\nlet apiKeys: ApiKey[] = [\r\n  // Add some sample data for testing\r\n  {\r\n    id: '1',\r\n    name: 'Sample API Key',\r\n    key: 'sk-sample1234567890abcdef1234567890abcdef1234567890',\r\n    description: 'This is a sample API key for testing',\r\n    createdAt: new Date().toISOString(),\r\n    isActive: true,\r\n  }\r\n];\r\n\r\n// Generate a random API key\r\nexport function generateApiKey(): string {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  let result = 'sk-';\r\n  for (let i = 0; i < 40; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  return result;\r\n}\r\n\r\n// API Key operations\r\nexport const apiKeyStore = {\r\n  // Get all API keys\r\n  getAll(): ApiKey[] {\r\n    return [...apiKeys];\r\n  },\r\n\r\n  // Get API key by ID\r\n  getById(id: string): ApiKey | undefined {\r\n    return apiKeys.find(key => key.id === id);\r\n  },\r\n\r\n  // Create new API key\r\n  create(data: Omit<ApiKey, 'id' | 'createdAt' | 'isActive'>): ApiKey {\r\n    const newApiKey: ApiKey = {\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString(),\r\n      isActive: true,\r\n      ...data,\r\n    };\r\n    apiKeys.push(newApiKey);\r\n    return newApiKey;\r\n  },\r\n\r\n  // Update API key\r\n  update(id: string, updates: Partial<Omit<ApiKey, 'id' | 'createdAt'>>): ApiKey | null {\r\n    console.log('apiKeyStore.update - Looking for ID:', id);\r\n    console.log('apiKeyStore.update - Available IDs:', apiKeys.map(k => k.id));\r\n    \r\n    const keyIndex = apiKeys.findIndex(key => key.id === id);\r\n    console.log('apiKeyStore.update - Found index:', keyIndex);\r\n    \r\n    if (keyIndex === -1) {\r\n      console.log('apiKeyStore.update - API key not found');\r\n      return null;\r\n    }\r\n\r\n    apiKeys[keyIndex] = { ...apiKeys[keyIndex], ...updates };\r\n    console.log('apiKeyStore.update - Updated API key:', apiKeys[keyIndex]);\r\n    return apiKeys[keyIndex];\r\n  },\r\n\r\n  // Delete API key\r\n  delete(id: string): boolean {\r\n    console.log('apiKeyStore.delete - Looking for ID:', id);\r\n    console.log('apiKeyStore.delete - Available IDs:', apiKeys.map(k => k.id));\r\n    \r\n    const keyIndex = apiKeys.findIndex(key => key.id === id);\r\n    console.log('apiKeyStore.delete - Found index:', keyIndex);\r\n    \r\n    if (keyIndex === -1) {\r\n      console.log('apiKeyStore.delete - API key not found');\r\n      return false;\r\n    }\r\n\r\n    apiKeys.splice(keyIndex, 1);\r\n    console.log('apiKeyStore.delete - API key deleted successfully');\r\n    return true;\r\n  },\r\n};\r\n"],"names":[],"mappings":"AAAA,wCAAwC;AACxC,yEAAyE;;;;;;;AAYzE,oBAAoB;AACpB,IAAI,UAAoB;IACtB,mCAAmC;IACnC;QACE,IAAI;QACJ,MAAM;QACN,KAAK;QACL,aAAa;QACb,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;IACZ;CACD;AAGM,SAAS;IACd,MAAM,QAAQ;IACd,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;QAC3B,UAAU,MAAM,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,MAAM;IAChE;IACA,OAAO;AACT;AAGO,MAAM,cAAc;IACzB,mBAAmB;IACnB;QACE,OAAO;eAAI;SAAQ;IACrB;IAEA,oBAAoB;IACpB,SAAQ,EAAU;QAChB,OAAO,QAAQ,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;IACxC;IAEA,qBAAqB;IACrB,QAAO,IAAmD;QACxD,MAAM,YAAoB;YACxB,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,WAAW,IAAI,OAAO,WAAW;YACjC,UAAU;YACV,GAAG,IAAI;QACT;QACA,QAAQ,IAAI,CAAC;QACb,OAAO;IACT;IAEA,iBAAiB;IACjB,QAAO,EAAU,EAAE,OAAkD;QACnE,QAAQ,GAAG,CAAC,wCAAwC;QACpD,QAAQ,GAAG,CAAC,uCAAuC,QAAQ,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE;QAExE,MAAM,WAAW,QAAQ,SAAS,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QACrD,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,IAAI,aAAa,CAAC,GAAG;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,OAAO,CAAC,SAAS,GAAG;YAAE,GAAG,OAAO,CAAC,SAAS;YAAE,GAAG,OAAO;QAAC;QACvD,QAAQ,GAAG,CAAC,yCAAyC,OAAO,CAAC,SAAS;QACtE,OAAO,OAAO,CAAC,SAAS;IAC1B;IAEA,iBAAiB;IACjB,QAAO,EAAU;QACf,QAAQ,GAAG,CAAC,wCAAwC;QACpD,QAAQ,GAAG,CAAC,uCAAuC,QAAQ,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE;QAExE,MAAM,WAAW,QAAQ,SAAS,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QACrD,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,IAAI,aAAa,CAAC,GAAG;YACnB,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;QAEA,QAAQ,MAAM,CAAC,UAAU;QACzB,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///D:/AI/Course_Complete/Fullstack%20Developer%20with%20Cursor%20Vide%20coding/projecttry/myapp/my-app/app/api/keys/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { apiKeyStore } from '@/lib/api-keys-store';\r\n\r\n// GET /api/keys - Fetch all API keys\r\nexport async function GET() {\r\n  try {\r\n    const apiKeys = apiKeyStore.getAll();\r\n    console.log('GET /api/keys - All API keys:', apiKeys);\r\n    return NextResponse.json(apiKeys);\r\n  } catch (error) {\r\n    console.error('GET /api/keys - Error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch API keys' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST /api/keys - Create a new API key\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, description, key } = body;\r\n\r\n    console.log('POST /api/keys - Body:', body);\r\n\r\n    if (!name) {\r\n      return NextResponse.json(\r\n        { error: 'Name is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!key) {\r\n      return NextResponse.json(\r\n        { error: 'API Key is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const newApiKey = apiKeyStore.create({\r\n      name,\r\n      description: description || '',\r\n      key,\r\n    });\r\n\r\n    console.log('POST /api/keys - Created API key:', newApiKey);\r\n    return NextResponse.json(newApiKey, { status: 201 });\r\n  } catch (error) {\r\n    console.error('POST /api/keys - Error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to create API key' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,4IAAW,CAAC,MAAM;QAClC,QAAQ,GAAG,CAAC,iCAAiC;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,GAAG;QAEnC,QAAQ,GAAG,CAAC,0BAA0B;QAEtC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,KAAK;YACR,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,4IAAW,CAAC,MAAM,CAAC;YACnC;YACA,aAAa,eAAe;YAC5B;QACF;QAEA,QAAQ,GAAG,CAAC,qCAAqC;QACjD,OAAO,gJAAY,CAAC,IAAI,CAAC,WAAW;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}